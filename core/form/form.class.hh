<?hh
namespace Ninjack\Core\Form;
use Ninjack\Core\Application as Application;
use Ninjack\Core\CSRFToken as CSRFToken;
use Ninjack\Core\Form\FormInput as FormInput;
use Ninjack\Core\Form\FormValidator as FormValidator;
use Ninjack\Core\Exception\InvalidCSRFTokenException as InvalidCSRFTokenException;

/**
 * An html form genrator and checker.
 *
 * @author Sulivan
 */
class Form{

  /**
   * The FormInput of the Form.
   */
  private Vector<FormInput> $inputs;

  /**
   * The attributes for the generated form element.
   */
  private Map<string, mixed> $attributes;


  /**
   * The errors message generated by inputs validators.
   */
  private Vector<string> $errors;

  /**
   * The name of the form
   */
  private string $name = "";

  /**
   * True if the crsf protection is activate.
   */
  private bool $csrf_protection = true;

  /**
   * Constructor.
   */
  public function __construct(){
    $this->inputs = Vector{};
    $this->attributes = new Map(null);
    $this->errors = Vector{};
  }

  /**
   * Run all the inputs validators and generate errors strings.
   *
   * @return True of the form is valid, else false.
   */
  public function run() : bool{
    $request = Application::get_instance()->get_request();
    $session = Application::get_instance()->session();
    $token = $session->get_value($this->__get_csrf_token_input_name());

    if($request->is_post() && $this->csrf_protection){
      if($token instanceof CSRFToken){
        if(
            $token->is_expired() ||
            $request->post($this->__get_csrf_token_input_name()) != $token->get_value()
          ){

            throw new InvalidCSRFTokenException();
        }
      }
      else{
        throw new InvalidCSRFTokenException();
      }
    }

    foreach ($this->inputs as $input){
      if(!$input->is_valid()){
        $this->errors->addAll($input->get_errors());
      }
    }

    return $this->errors->isEmpty();
  }

  /**
   * Add an input to the form.
   * Attach validators to the input.
   *
   * @param FormInput $input the input to add.
   * @param Vector<FormValidator> $validators Validators to attach to the input.
   */
  public function add_input(FormInput $input, Vector<FormValidator> $validators) : void{
    $input->set_validators($validators);
    $input->set_form_source($this);

    $this->inputs->add($input);
  }

  /**
   * Returns the inputs of the form.
   *
   * @return Vector<FormInput> the inputs of the form.
   */
  public function get_inputs() : Vector<FormInput>{
    return $this->inputs;
  }

  /**
   * Load configuration given by name and returns
   * the configured form.
   *
   * @param The name of the form configuration to load.
   *
   * @return the configred Form.
   */
  public function load_form($name) : Form{
    $path = Application::get_instance()->loader()->get_form_path($name);

    include $path;

    $this->name = $name;
    return $this;
  }

  /**
   * Set the attributes of the generated xhp form element.
   *
   * @param Map<string,mixed> $attrinutes The attributes of the form xhp element.
   */
  public function set_attributes(Map<string,mixed> $attrinutes){
    $this->attributes = $attrinutes;
  }

  /**
   * Return the generated xhp form element.
   * The form contains all xhp input elements of the form.
   *
   * @return the xhp form element with all inputs.
   */
  public function get_element() : \XHPChild{
    $form = <form method="post"></form>;

    if($this->csrf_protection){
      $form->appendChild($this->get_csrf_token_input());
    }

    foreach ($this->inputs as $input) {

      if($input->is_label_rendered()){
        $form->appendChild($input->get_label_element());
      }
      $form->appendChild($input->get_element());
    }

    return $form;
  }

  public function get_csrf_token_input() : \XHPChild{

    $input = <input type="hidden"></input>;
    $token = new CSRFToken($this->__get_csrf_token_input_name());

    $input->setAttribute("value", $token->get_value());
    $name = $this->__get_csrf_token_input_name();

    $input->setAttribute("name", $name);

    Application::get_instance()->session()->set_value($name, $token);

    return $input;
  }

  private function __get_csrf_token_input_name(){
    $name = $this->name."_csrf_token";
    return $name;
  }

}
